// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEBSTREAMER_WEBSTREAMER_H_
#define FLATBUFFERS_GENERATED_WEBSTREAMER_WEBSTREAMER_H_

#include "flatbuffers/flatbuffers.h"

#include "fbs/common_generated.h"
#include "fbs/livestreamer_generated.h"

namespace webstreamer {

struct root;

enum Any {
  Any_NONE = 0,
  Any_webstreamer_Topic = 1,
  Any_webstreamer_Subscription = 2,
  Any_webstreamer_livestreamer_Create = 3,
  Any_webstreamer_livestreamer_Destroy = 4,
  Any_webstreamer_livestreamer_AddViewer = 5,
  Any_webstreamer_livestreamer_RemoveViewer = 6,
  Any_MIN = Any_NONE,
  Any_MAX = Any_webstreamer_livestreamer_RemoveViewer
};

inline Any (&EnumValuesAny())[7] {
  static Any values[] = {
    Any_NONE,
    Any_webstreamer_Topic,
    Any_webstreamer_Subscription,
    Any_webstreamer_livestreamer_Create,
    Any_webstreamer_livestreamer_Destroy,
    Any_webstreamer_livestreamer_AddViewer,
    Any_webstreamer_livestreamer_RemoveViewer
  };
  return values;
}

inline const char **EnumNamesAny() {
  static const char *names[] = {
    "NONE",
    "webstreamer_Topic",
    "webstreamer_Subscription",
    "webstreamer_livestreamer_Create",
    "webstreamer_livestreamer_Destroy",
    "webstreamer_livestreamer_AddViewer",
    "webstreamer_livestreamer_RemoveViewer",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<Topic> {
  static const Any enum_value = Any_webstreamer_Topic;
};

template<> struct AnyTraits<Subscription> {
  static const Any enum_value = Any_webstreamer_Subscription;
};

template<> struct AnyTraits<webstreamer::livestreamer::Create> {
  static const Any enum_value = Any_webstreamer_livestreamer_Create;
};

template<> struct AnyTraits<webstreamer::livestreamer::Destroy> {
  static const Any enum_value = Any_webstreamer_livestreamer_Destroy;
};

template<> struct AnyTraits<webstreamer::livestreamer::AddViewer> {
  static const Any enum_value = Any_webstreamer_livestreamer_AddViewer;
};

template<> struct AnyTraits<webstreamer::livestreamer::RemoveViewer> {
  static const Any enum_value = Any_webstreamer_livestreamer_RemoveViewer;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct root FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ANY_TYPE = 4,
    VT_ANY = 6
  };
  Any any_type() const {
    return static_cast<Any>(GetField<uint8_t>(VT_ANY_TYPE, 0));
  }
  const void *any() const {
    return GetPointer<const void *>(VT_ANY);
  }
  template<typename T> const T *any_as() const;
  const Topic *any_as_webstreamer_Topic() const {
    return any_type() == Any_webstreamer_Topic ? static_cast<const Topic *>(any()) : nullptr;
  }
  const Subscription *any_as_webstreamer_Subscription() const {
    return any_type() == Any_webstreamer_Subscription ? static_cast<const Subscription *>(any()) : nullptr;
  }
  const webstreamer::livestreamer::Create *any_as_webstreamer_livestreamer_Create() const {
    return any_type() == Any_webstreamer_livestreamer_Create ? static_cast<const webstreamer::livestreamer::Create *>(any()) : nullptr;
  }
  const webstreamer::livestreamer::Destroy *any_as_webstreamer_livestreamer_Destroy() const {
    return any_type() == Any_webstreamer_livestreamer_Destroy ? static_cast<const webstreamer::livestreamer::Destroy *>(any()) : nullptr;
  }
  const webstreamer::livestreamer::AddViewer *any_as_webstreamer_livestreamer_AddViewer() const {
    return any_type() == Any_webstreamer_livestreamer_AddViewer ? static_cast<const webstreamer::livestreamer::AddViewer *>(any()) : nullptr;
  }
  const webstreamer::livestreamer::RemoveViewer *any_as_webstreamer_livestreamer_RemoveViewer() const {
    return any_type() == Any_webstreamer_livestreamer_RemoveViewer ? static_cast<const webstreamer::livestreamer::RemoveViewer *>(any()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ANY_TYPE) &&
           VerifyOffset(verifier, VT_ANY) &&
           VerifyAny(verifier, any(), any_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Topic *root::any_as<Topic>() const {
  return any_as_webstreamer_Topic();
}

template<> inline const Subscription *root::any_as<Subscription>() const {
  return any_as_webstreamer_Subscription();
}

template<> inline const webstreamer::livestreamer::Create *root::any_as<webstreamer::livestreamer::Create>() const {
  return any_as_webstreamer_livestreamer_Create();
}

template<> inline const webstreamer::livestreamer::Destroy *root::any_as<webstreamer::livestreamer::Destroy>() const {
  return any_as_webstreamer_livestreamer_Destroy();
}

template<> inline const webstreamer::livestreamer::AddViewer *root::any_as<webstreamer::livestreamer::AddViewer>() const {
  return any_as_webstreamer_livestreamer_AddViewer();
}

template<> inline const webstreamer::livestreamer::RemoveViewer *root::any_as<webstreamer::livestreamer::RemoveViewer>() const {
  return any_as_webstreamer_livestreamer_RemoveViewer();
}

struct rootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any_type(Any any_type) {
    fbb_.AddElement<uint8_t>(root::VT_ANY_TYPE, static_cast<uint8_t>(any_type), 0);
  }
  void add_any(flatbuffers::Offset<void> any) {
    fbb_.AddOffset(root::VT_ANY, any);
  }
  explicit rootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  rootBuilder &operator=(const rootBuilder &);
  flatbuffers::Offset<root> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<root>(end);
    return o;
  }
};

inline flatbuffers::Offset<root> Createroot(
    flatbuffers::FlatBufferBuilder &_fbb,
    Any any_type = Any_NONE,
    flatbuffers::Offset<void> any = 0) {
  rootBuilder builder_(_fbb);
  builder_.add_any(any);
  builder_.add_any_type(any_type);
  return builder_.Finish();
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_webstreamer_Topic: {
      auto ptr = reinterpret_cast<const Topic *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_webstreamer_Subscription: {
      auto ptr = reinterpret_cast<const Subscription *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_webstreamer_livestreamer_Create: {
      auto ptr = reinterpret_cast<const webstreamer::livestreamer::Create *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_webstreamer_livestreamer_Destroy: {
      auto ptr = reinterpret_cast<const webstreamer::livestreamer::Destroy *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_webstreamer_livestreamer_AddViewer: {
      auto ptr = reinterpret_cast<const webstreamer::livestreamer::AddViewer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_webstreamer_livestreamer_RemoveViewer: {
      auto ptr = reinterpret_cast<const webstreamer::livestreamer::RemoveViewer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const webstreamer::root *Getroot(const void *buf) {
  return flatbuffers::GetRoot<webstreamer::root>(buf);
}

inline bool VerifyrootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<webstreamer::root>(nullptr);
}

inline void FinishrootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<webstreamer::root> root) {
  fbb.Finish(root);
}

}  // namespace webstreamer

#endif  // FLATBUFFERS_GENERATED_WEBSTREAMER_WEBSTREAMER_H_
