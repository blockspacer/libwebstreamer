// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LIVESTREAMER_WEBSTREAMER_LIVESTREAMER_H_
#define FLATBUFFERS_GENERATED_LIVESTREAMER_WEBSTREAMER_LIVESTREAMER_H_

#include "flatbuffers/flatbuffers.h"

#include "fbs/common_generated.h"

namespace webstreamer {
namespace livestreamer {

struct Create;

struct Destroy;

struct AddViewer;

struct RemoveViewer;

struct LiveStreamError;

struct Create FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_SOURCE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const webstreamer::Endpoint *source() const {
    return GetPointer<const webstreamer::Endpoint *>(VT_SOURCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyTable(source()) &&
           verifier.EndTable();
  }
};

struct CreateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Create::VT_NAME, name);
  }
  void add_source(flatbuffers::Offset<webstreamer::Endpoint> source) {
    fbb_.AddOffset(Create::VT_SOURCE, source);
  }
  explicit CreateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CreateBuilder &operator=(const CreateBuilder &);
  flatbuffers::Offset<Create> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Create>(end);
    return o;
  }
};

inline flatbuffers::Offset<Create> CreateCreate(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<webstreamer::Endpoint> source = 0) {
  CreateBuilder builder_(_fbb);
  builder_.add_source(source);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Create> CreateCreateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<webstreamer::Endpoint> source = 0) {
  return webstreamer::livestreamer::CreateCreate(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      source);
}

struct Destroy FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct DestroyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Destroy::VT_NAME, name);
  }
  explicit DestroyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DestroyBuilder &operator=(const DestroyBuilder &);
  flatbuffers::Offset<Destroy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Destroy>(end);
    return o;
  }
};

inline flatbuffers::Offset<Destroy> CreateDestroy(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  DestroyBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Destroy> CreateDestroyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return webstreamer::livestreamer::CreateDestroy(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct AddViewer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COMPONENT = 4,
    VT_VIEWER = 6
  };
  const flatbuffers::String *component() const {
    return GetPointer<const flatbuffers::String *>(VT_COMPONENT);
  }
  const webstreamer::Endpoint *viewer() const {
    return GetPointer<const webstreamer::Endpoint *>(VT_VIEWER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COMPONENT) &&
           verifier.Verify(component()) &&
           VerifyOffset(verifier, VT_VIEWER) &&
           verifier.VerifyTable(viewer()) &&
           verifier.EndTable();
  }
};

struct AddViewerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_component(flatbuffers::Offset<flatbuffers::String> component) {
    fbb_.AddOffset(AddViewer::VT_COMPONENT, component);
  }
  void add_viewer(flatbuffers::Offset<webstreamer::Endpoint> viewer) {
    fbb_.AddOffset(AddViewer::VT_VIEWER, viewer);
  }
  explicit AddViewerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddViewerBuilder &operator=(const AddViewerBuilder &);
  flatbuffers::Offset<AddViewer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddViewer>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddViewer> CreateAddViewer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> component = 0,
    flatbuffers::Offset<webstreamer::Endpoint> viewer = 0) {
  AddViewerBuilder builder_(_fbb);
  builder_.add_viewer(viewer);
  builder_.add_component(component);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddViewer> CreateAddViewerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *component = nullptr,
    flatbuffers::Offset<webstreamer::Endpoint> viewer = 0) {
  return webstreamer::livestreamer::CreateAddViewer(
      _fbb,
      component ? _fbb.CreateString(component) : 0,
      viewer);
}

struct RemoveViewer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COMPONENT = 4,
    VT_ENDPOINT = 6
  };
  const flatbuffers::String *component() const {
    return GetPointer<const flatbuffers::String *>(VT_COMPONENT);
  }
  const flatbuffers::String *endpoint() const {
    return GetPointer<const flatbuffers::String *>(VT_ENDPOINT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COMPONENT) &&
           verifier.Verify(component()) &&
           VerifyOffset(verifier, VT_ENDPOINT) &&
           verifier.Verify(endpoint()) &&
           verifier.EndTable();
  }
};

struct RemoveViewerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_component(flatbuffers::Offset<flatbuffers::String> component) {
    fbb_.AddOffset(RemoveViewer::VT_COMPONENT, component);
  }
  void add_endpoint(flatbuffers::Offset<flatbuffers::String> endpoint) {
    fbb_.AddOffset(RemoveViewer::VT_ENDPOINT, endpoint);
  }
  explicit RemoveViewerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveViewerBuilder &operator=(const RemoveViewerBuilder &);
  flatbuffers::Offset<RemoveViewer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveViewer>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveViewer> CreateRemoveViewer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> component = 0,
    flatbuffers::Offset<flatbuffers::String> endpoint = 0) {
  RemoveViewerBuilder builder_(_fbb);
  builder_.add_endpoint(endpoint);
  builder_.add_component(component);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoveViewer> CreateRemoveViewerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *component = nullptr,
    const char *endpoint = nullptr) {
  return webstreamer::livestreamer::CreateRemoveViewer(
      _fbb,
      component ? _fbb.CreateString(component) : 0,
      endpoint ? _fbb.CreateString(endpoint) : 0);
}

struct LiveStreamError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_REASON = 6
  };
  int16_t code() const {
    return GetField<int16_t>(VT_CODE, 0);
  }
  const flatbuffers::String *reason() const {
    return GetPointer<const flatbuffers::String *>(VT_REASON);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_REASON) &&
           verifier.Verify(reason()) &&
           verifier.EndTable();
  }
};

struct LiveStreamErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int16_t code) {
    fbb_.AddElement<int16_t>(LiveStreamError::VT_CODE, code, 0);
  }
  void add_reason(flatbuffers::Offset<flatbuffers::String> reason) {
    fbb_.AddOffset(LiveStreamError::VT_REASON, reason);
  }
  explicit LiveStreamErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamErrorBuilder &operator=(const LiveStreamErrorBuilder &);
  flatbuffers::Offset<LiveStreamError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamError>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamError> CreateLiveStreamError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t code = 0,
    flatbuffers::Offset<flatbuffers::String> reason = 0) {
  LiveStreamErrorBuilder builder_(_fbb);
  builder_.add_reason(reason);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<LiveStreamError> CreateLiveStreamErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t code = 0,
    const char *reason = nullptr) {
  return webstreamer::livestreamer::CreateLiveStreamError(
      _fbb,
      code,
      reason ? _fbb.CreateString(reason) : 0);
}

}  // namespace livestreamer
}  // namespace webstreamer

#endif  // FLATBUFFERS_GENERATED_LIVESTREAMER_WEBSTREAMER_LIVESTREAMER_H_
