// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEBSTREAMER_WEBSTREAMER_H_
#define FLATBUFFERS_GENERATED_WEBSTREAMER_WEBSTREAMER_H_

#include "flatbuffers/flatbuffers.h"

#include "webrtc_generated.h"

namespace webstreamer {

struct EndpointBase;

struct RtspClient;

struct Webrtc;

struct Endpoint;

struct Pipeline;

struct LiveStreamCreate;

struct LiveStreamDestroy;

struct LiveStreamAddEndpoint;

struct LiveStreamAddEndpoints;

struct LiveStreamRemoveEndpoint;

struct LiveStreamRemoveEndpoints;

struct LiveStreamError;

struct LiveStreamAny;

enum EndpointType {
  EndpointType_RTSPCLIENT = 0,
  EndpointType_WEBRTC = 1,
  EndpointType_MIN = EndpointType_RTSPCLIENT,
  EndpointType_MAX = EndpointType_WEBRTC
};

inline EndpointType (&EnumValuesEndpointType())[2] {
  static EndpointType values[] = {
    EndpointType_RTSPCLIENT,
    EndpointType_WEBRTC
  };
  return values;
}

inline const char **EnumNamesEndpointType() {
  static const char *names[] = {
    "RTSPCLIENT",
    "WEBRTC",
    nullptr
  };
  return names;
}

inline const char *EnumNameEndpointType(EndpointType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEndpointType()[index];
}

enum VideoCodec {
  VideoCodec_H264 = 0,
  VideoCodec_H265 = 1,
  VideoCodec_VP8 = 2,
  VideoCodec_MIN = VideoCodec_H264,
  VideoCodec_MAX = VideoCodec_VP8
};

inline VideoCodec (&EnumValuesVideoCodec())[3] {
  static VideoCodec values[] = {
    VideoCodec_H264,
    VideoCodec_H265,
    VideoCodec_VP8
  };
  return values;
}

inline const char **EnumNamesVideoCodec() {
  static const char *names[] = {
    "H264",
    "H265",
    "VP8",
    nullptr
  };
  return names;
}

inline const char *EnumNameVideoCodec(VideoCodec e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesVideoCodec()[index];
}

enum AudioCodec {
  AudioCodec_PCMA = 0,
  AudioCodec_OPUS = 1,
  AudioCodec_MIN = AudioCodec_PCMA,
  AudioCodec_MAX = AudioCodec_OPUS
};

inline AudioCodec (&EnumValuesAudioCodec())[2] {
  static AudioCodec values[] = {
    AudioCodec_PCMA,
    AudioCodec_OPUS
  };
  return values;
}

inline const char **EnumNamesAudioCodec() {
  static const char *names[] = {
    "PCMA",
    "OPUS",
    nullptr
  };
  return names;
}

inline const char *EnumNameAudioCodec(AudioCodec e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAudioCodec()[index];
}

enum Any {
  Any_NONE = 0,
  Any_LiveStreamCreate = 1,
  Any_LiveStreamDestroy = 2,
  Any_LiveStreamAddEndpoint = 3,
  Any_LiveStreamRemoveEndpoint = 4,
  Any_LiveStreamAddEndpoints = 5,
  Any_LiveStreamRemoveEndpoints = 6,
  Any_LiveStreamError = 7,
  Any_MIN = Any_NONE,
  Any_MAX = Any_LiveStreamError
};

inline Any (&EnumValuesAny())[8] {
  static Any values[] = {
    Any_NONE,
    Any_LiveStreamCreate,
    Any_LiveStreamDestroy,
    Any_LiveStreamAddEndpoint,
    Any_LiveStreamRemoveEndpoint,
    Any_LiveStreamAddEndpoints,
    Any_LiveStreamRemoveEndpoints,
    Any_LiveStreamError
  };
  return values;
}

inline const char **EnumNamesAny() {
  static const char *names[] = {
    "NONE",
    "LiveStreamCreate",
    "LiveStreamDestroy",
    "LiveStreamAddEndpoint",
    "LiveStreamRemoveEndpoint",
    "LiveStreamAddEndpoints",
    "LiveStreamRemoveEndpoints",
    "LiveStreamError",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<LiveStreamCreate> {
  static const Any enum_value = Any_LiveStreamCreate;
};

template<> struct AnyTraits<LiveStreamDestroy> {
  static const Any enum_value = Any_LiveStreamDestroy;
};

template<> struct AnyTraits<LiveStreamAddEndpoint> {
  static const Any enum_value = Any_LiveStreamAddEndpoint;
};

template<> struct AnyTraits<LiveStreamRemoveEndpoint> {
  static const Any enum_value = Any_LiveStreamRemoveEndpoint;
};

template<> struct AnyTraits<LiveStreamAddEndpoints> {
  static const Any enum_value = Any_LiveStreamAddEndpoints;
};

template<> struct AnyTraits<LiveStreamRemoveEndpoints> {
  static const Any enum_value = Any_LiveStreamRemoveEndpoints;
};

template<> struct AnyTraits<LiveStreamError> {
  static const Any enum_value = Any_LiveStreamError;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct EndpointBase FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_TYPE = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  EndpointType type() const {
    return static_cast<EndpointType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct EndpointBaseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(EndpointBase::VT_ID, id);
  }
  void add_type(EndpointType type) {
    fbb_.AddElement<int8_t>(EndpointBase::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit EndpointBaseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EndpointBaseBuilder &operator=(const EndpointBaseBuilder &);
  flatbuffers::Offset<EndpointBase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EndpointBase>(end);
    return o;
  }
};

inline flatbuffers::Offset<EndpointBase> CreateEndpointBase(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    EndpointType type = EndpointType_RTSPCLIENT) {
  EndpointBaseBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<EndpointBase> CreateEndpointBaseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    EndpointType type = EndpointType_RTSPCLIENT) {
  return webstreamer::CreateEndpointBase(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      type);
}

struct RtspClient FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BASE = 4,
    VT_URL = 6
  };
  const EndpointBase *base() const {
    return GetPointer<const EndpointBase *>(VT_BASE);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.Verify(url()) &&
           verifier.EndTable();
  }
};

struct RtspClientBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<EndpointBase> base) {
    fbb_.AddOffset(RtspClient::VT_BASE, base);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(RtspClient::VT_URL, url);
  }
  explicit RtspClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RtspClientBuilder &operator=(const RtspClientBuilder &);
  flatbuffers::Offset<RtspClient> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RtspClient>(end);
    return o;
  }
};

inline flatbuffers::Offset<RtspClient> CreateRtspClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<EndpointBase> base = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  RtspClientBuilder builder_(_fbb);
  builder_.add_url(url);
  builder_.add_base(base);
  return builder_.Finish();
}

inline flatbuffers::Offset<RtspClient> CreateRtspClientDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<EndpointBase> base = 0,
    const char *url = nullptr) {
  return webstreamer::CreateRtspClient(
      _fbb,
      base,
      url ? _fbb.CreateString(url) : 0);
}

struct Webrtc FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BASE = 4,
    VT_GROUP = 6,
    VT_CONNECTION = 8,
    VT_SDP_ROLE = 10,
    VT_AUDIO_STREAM_MODE = 12,
    VT_VIDEO_STREAM_MODE = 14
  };
  const EndpointBase *base() const {
    return GetPointer<const EndpointBase *>(VT_BASE);
  }
  const flatbuffers::String *group() const {
    return GetPointer<const flatbuffers::String *>(VT_GROUP);
  }
  const flatbuffers::String *connection() const {
    return GetPointer<const flatbuffers::String *>(VT_CONNECTION);
  }
  webstreamer::webrtc::SdpRole sdp_role() const {
    return static_cast<webstreamer::webrtc::SdpRole>(GetField<int8_t>(VT_SDP_ROLE, 0));
  }
  webstreamer::webrtc::StreamMode audio_stream_mode() const {
    return static_cast<webstreamer::webrtc::StreamMode>(GetField<int8_t>(VT_AUDIO_STREAM_MODE, 0));
  }
  webstreamer::webrtc::StreamMode video_stream_mode() const {
    return static_cast<webstreamer::webrtc::StreamMode>(GetField<int8_t>(VT_VIDEO_STREAM_MODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffset(verifier, VT_GROUP) &&
           verifier.Verify(group()) &&
           VerifyOffset(verifier, VT_CONNECTION) &&
           verifier.Verify(connection()) &&
           VerifyField<int8_t>(verifier, VT_SDP_ROLE) &&
           VerifyField<int8_t>(verifier, VT_AUDIO_STREAM_MODE) &&
           VerifyField<int8_t>(verifier, VT_VIDEO_STREAM_MODE) &&
           verifier.EndTable();
  }
};

struct WebrtcBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<EndpointBase> base) {
    fbb_.AddOffset(Webrtc::VT_BASE, base);
  }
  void add_group(flatbuffers::Offset<flatbuffers::String> group) {
    fbb_.AddOffset(Webrtc::VT_GROUP, group);
  }
  void add_connection(flatbuffers::Offset<flatbuffers::String> connection) {
    fbb_.AddOffset(Webrtc::VT_CONNECTION, connection);
  }
  void add_sdp_role(webstreamer::webrtc::SdpRole sdp_role) {
    fbb_.AddElement<int8_t>(Webrtc::VT_SDP_ROLE, static_cast<int8_t>(sdp_role), 0);
  }
  void add_audio_stream_mode(webstreamer::webrtc::StreamMode audio_stream_mode) {
    fbb_.AddElement<int8_t>(Webrtc::VT_AUDIO_STREAM_MODE, static_cast<int8_t>(audio_stream_mode), 0);
  }
  void add_video_stream_mode(webstreamer::webrtc::StreamMode video_stream_mode) {
    fbb_.AddElement<int8_t>(Webrtc::VT_VIDEO_STREAM_MODE, static_cast<int8_t>(video_stream_mode), 0);
  }
  explicit WebrtcBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WebrtcBuilder &operator=(const WebrtcBuilder &);
  flatbuffers::Offset<Webrtc> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Webrtc>(end);
    return o;
  }
};

inline flatbuffers::Offset<Webrtc> CreateWebrtc(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<EndpointBase> base = 0,
    flatbuffers::Offset<flatbuffers::String> group = 0,
    flatbuffers::Offset<flatbuffers::String> connection = 0,
    webstreamer::webrtc::SdpRole sdp_role = webstreamer::webrtc::SdpRole_OFFER,
    webstreamer::webrtc::StreamMode audio_stream_mode = webstreamer::webrtc::StreamMode_SENDONLY,
    webstreamer::webrtc::StreamMode video_stream_mode = webstreamer::webrtc::StreamMode_SENDONLY) {
  WebrtcBuilder builder_(_fbb);
  builder_.add_connection(connection);
  builder_.add_group(group);
  builder_.add_base(base);
  builder_.add_video_stream_mode(video_stream_mode);
  builder_.add_audio_stream_mode(audio_stream_mode);
  builder_.add_sdp_role(sdp_role);
  return builder_.Finish();
}

inline flatbuffers::Offset<Webrtc> CreateWebrtcDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<EndpointBase> base = 0,
    const char *group = nullptr,
    const char *connection = nullptr,
    webstreamer::webrtc::SdpRole sdp_role = webstreamer::webrtc::SdpRole_OFFER,
    webstreamer::webrtc::StreamMode audio_stream_mode = webstreamer::webrtc::StreamMode_SENDONLY,
    webstreamer::webrtc::StreamMode video_stream_mode = webstreamer::webrtc::StreamMode_SENDONLY) {
  return webstreamer::CreateWebrtc(
      _fbb,
      base,
      group ? _fbb.CreateString(group) : 0,
      connection ? _fbb.CreateString(connection) : 0,
      sdp_role,
      audio_stream_mode,
      video_stream_mode);
}

struct Endpoint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RTSPCLIENT = 4,
    VT_WEBRTC = 6
  };
  const RtspClient *rtspclient() const {
    return GetPointer<const RtspClient *>(VT_RTSPCLIENT);
  }
  const Webrtc *webrtc() const {
    return GetPointer<const Webrtc *>(VT_WEBRTC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RTSPCLIENT) &&
           verifier.VerifyTable(rtspclient()) &&
           VerifyOffset(verifier, VT_WEBRTC) &&
           verifier.VerifyTable(webrtc()) &&
           verifier.EndTable();
  }
};

struct EndpointBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rtspclient(flatbuffers::Offset<RtspClient> rtspclient) {
    fbb_.AddOffset(Endpoint::VT_RTSPCLIENT, rtspclient);
  }
  void add_webrtc(flatbuffers::Offset<Webrtc> webrtc) {
    fbb_.AddOffset(Endpoint::VT_WEBRTC, webrtc);
  }
  explicit EndpointBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EndpointBuilder &operator=(const EndpointBuilder &);
  flatbuffers::Offset<Endpoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Endpoint>(end);
    return o;
  }
};

inline flatbuffers::Offset<Endpoint> CreateEndpoint(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RtspClient> rtspclient = 0,
    flatbuffers::Offset<Webrtc> webrtc = 0) {
  EndpointBuilder builder_(_fbb);
  builder_.add_webrtc(webrtc);
  builder_.add_rtspclient(rtspclient);
  return builder_.Finish();
}

struct Pipeline FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_VIDEO_CODEC = 6,
    VT_AUDIO_CODEC = 8
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  VideoCodec video_codec() const {
    return static_cast<VideoCodec>(GetField<int8_t>(VT_VIDEO_CODEC, 0));
  }
  AudioCodec audio_codec() const {
    return static_cast<AudioCodec>(GetField<int8_t>(VT_AUDIO_CODEC, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<int8_t>(verifier, VT_VIDEO_CODEC) &&
           VerifyField<int8_t>(verifier, VT_AUDIO_CODEC) &&
           verifier.EndTable();
  }
};

struct PipelineBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Pipeline::VT_ID, id);
  }
  void add_video_codec(VideoCodec video_codec) {
    fbb_.AddElement<int8_t>(Pipeline::VT_VIDEO_CODEC, static_cast<int8_t>(video_codec), 0);
  }
  void add_audio_codec(AudioCodec audio_codec) {
    fbb_.AddElement<int8_t>(Pipeline::VT_AUDIO_CODEC, static_cast<int8_t>(audio_codec), 0);
  }
  explicit PipelineBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PipelineBuilder &operator=(const PipelineBuilder &);
  flatbuffers::Offset<Pipeline> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Pipeline>(end);
    return o;
  }
};

inline flatbuffers::Offset<Pipeline> CreatePipeline(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    VideoCodec video_codec = VideoCodec_H264,
    AudioCodec audio_codec = AudioCodec_PCMA) {
  PipelineBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_audio_codec(audio_codec);
  builder_.add_video_codec(video_codec);
  return builder_.Finish();
}

inline flatbuffers::Offset<Pipeline> CreatePipelineDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    VideoCodec video_codec = VideoCodec_H264,
    AudioCodec audio_codec = AudioCodec_PCMA) {
  return webstreamer::CreatePipeline(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      video_codec,
      audio_codec);
}

struct LiveStreamCreate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PIPELINE = 4,
    VT_ENDPOINT = 6
  };
  const Pipeline *pipeline() const {
    return GetPointer<const Pipeline *>(VT_PIPELINE);
  }
  const Endpoint *endpoint() const {
    return GetPointer<const Endpoint *>(VT_ENDPOINT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PIPELINE) &&
           verifier.VerifyTable(pipeline()) &&
           VerifyOffset(verifier, VT_ENDPOINT) &&
           verifier.VerifyTable(endpoint()) &&
           verifier.EndTable();
  }
};

struct LiveStreamCreateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pipeline(flatbuffers::Offset<Pipeline> pipeline) {
    fbb_.AddOffset(LiveStreamCreate::VT_PIPELINE, pipeline);
  }
  void add_endpoint(flatbuffers::Offset<Endpoint> endpoint) {
    fbb_.AddOffset(LiveStreamCreate::VT_ENDPOINT, endpoint);
  }
  explicit LiveStreamCreateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamCreateBuilder &operator=(const LiveStreamCreateBuilder &);
  flatbuffers::Offset<LiveStreamCreate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamCreate>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamCreate> CreateLiveStreamCreate(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Pipeline> pipeline = 0,
    flatbuffers::Offset<Endpoint> endpoint = 0) {
  LiveStreamCreateBuilder builder_(_fbb);
  builder_.add_endpoint(endpoint);
  builder_.add_pipeline(pipeline);
  return builder_.Finish();
}

struct LiveStreamDestroy FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           verifier.EndTable();
  }
};

struct LiveStreamDestroyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LiveStreamDestroy::VT_ID, id);
  }
  explicit LiveStreamDestroyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamDestroyBuilder &operator=(const LiveStreamDestroyBuilder &);
  flatbuffers::Offset<LiveStreamDestroy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamDestroy>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamDestroy> CreateLiveStreamDestroy(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0) {
  LiveStreamDestroyBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LiveStreamDestroy> CreateLiveStreamDestroyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr) {
  return webstreamer::CreateLiveStreamDestroy(
      _fbb,
      id ? _fbb.CreateString(id) : 0);
}

struct LiveStreamAddEndpoint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_ENDPOINT = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const Endpoint *endpoint() const {
    return GetPointer<const Endpoint *>(VT_ENDPOINT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyOffset(verifier, VT_ENDPOINT) &&
           verifier.VerifyTable(endpoint()) &&
           verifier.EndTable();
  }
};

struct LiveStreamAddEndpointBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LiveStreamAddEndpoint::VT_ID, id);
  }
  void add_endpoint(flatbuffers::Offset<Endpoint> endpoint) {
    fbb_.AddOffset(LiveStreamAddEndpoint::VT_ENDPOINT, endpoint);
  }
  explicit LiveStreamAddEndpointBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamAddEndpointBuilder &operator=(const LiveStreamAddEndpointBuilder &);
  flatbuffers::Offset<LiveStreamAddEndpoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamAddEndpoint>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamAddEndpoint> CreateLiveStreamAddEndpoint(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<Endpoint> endpoint = 0) {
  LiveStreamAddEndpointBuilder builder_(_fbb);
  builder_.add_endpoint(endpoint);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LiveStreamAddEndpoint> CreateLiveStreamAddEndpointDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    flatbuffers::Offset<Endpoint> endpoint = 0) {
  return webstreamer::CreateLiveStreamAddEndpoint(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      endpoint);
}

struct LiveStreamAddEndpoints FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_ENDPOINTS = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Endpoint>> *endpoints() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Endpoint>> *>(VT_ENDPOINTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyOffset(verifier, VT_ENDPOINTS) &&
           verifier.Verify(endpoints()) &&
           verifier.VerifyVectorOfTables(endpoints()) &&
           verifier.EndTable();
  }
};

struct LiveStreamAddEndpointsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LiveStreamAddEndpoints::VT_ID, id);
  }
  void add_endpoints(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Endpoint>>> endpoints) {
    fbb_.AddOffset(LiveStreamAddEndpoints::VT_ENDPOINTS, endpoints);
  }
  explicit LiveStreamAddEndpointsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamAddEndpointsBuilder &operator=(const LiveStreamAddEndpointsBuilder &);
  flatbuffers::Offset<LiveStreamAddEndpoints> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamAddEndpoints>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamAddEndpoints> CreateLiveStreamAddEndpoints(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Endpoint>>> endpoints = 0) {
  LiveStreamAddEndpointsBuilder builder_(_fbb);
  builder_.add_endpoints(endpoints);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LiveStreamAddEndpoints> CreateLiveStreamAddEndpointsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const std::vector<flatbuffers::Offset<Endpoint>> *endpoints = nullptr) {
  return webstreamer::CreateLiveStreamAddEndpoints(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      endpoints ? _fbb.CreateVector<flatbuffers::Offset<Endpoint>>(*endpoints) : 0);
}

struct LiveStreamRemoveEndpoint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_ENDPOINT_ID = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *endpoint_id() const {
    return GetPointer<const flatbuffers::String *>(VT_ENDPOINT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyOffset(verifier, VT_ENDPOINT_ID) &&
           verifier.Verify(endpoint_id()) &&
           verifier.EndTable();
  }
};

struct LiveStreamRemoveEndpointBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LiveStreamRemoveEndpoint::VT_ID, id);
  }
  void add_endpoint_id(flatbuffers::Offset<flatbuffers::String> endpoint_id) {
    fbb_.AddOffset(LiveStreamRemoveEndpoint::VT_ENDPOINT_ID, endpoint_id);
  }
  explicit LiveStreamRemoveEndpointBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamRemoveEndpointBuilder &operator=(const LiveStreamRemoveEndpointBuilder &);
  flatbuffers::Offset<LiveStreamRemoveEndpoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamRemoveEndpoint>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamRemoveEndpoint> CreateLiveStreamRemoveEndpoint(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> endpoint_id = 0) {
  LiveStreamRemoveEndpointBuilder builder_(_fbb);
  builder_.add_endpoint_id(endpoint_id);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LiveStreamRemoveEndpoint> CreateLiveStreamRemoveEndpointDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *endpoint_id = nullptr) {
  return webstreamer::CreateLiveStreamRemoveEndpoint(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      endpoint_id ? _fbb.CreateString(endpoint_id) : 0);
}

struct LiveStreamRemoveEndpoints FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_ENDPOINT_IDS = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *endpoint_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ENDPOINT_IDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyOffset(verifier, VT_ENDPOINT_IDS) &&
           verifier.Verify(endpoint_ids()) &&
           verifier.VerifyVectorOfStrings(endpoint_ids()) &&
           verifier.EndTable();
  }
};

struct LiveStreamRemoveEndpointsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LiveStreamRemoveEndpoints::VT_ID, id);
  }
  void add_endpoint_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> endpoint_ids) {
    fbb_.AddOffset(LiveStreamRemoveEndpoints::VT_ENDPOINT_IDS, endpoint_ids);
  }
  explicit LiveStreamRemoveEndpointsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamRemoveEndpointsBuilder &operator=(const LiveStreamRemoveEndpointsBuilder &);
  flatbuffers::Offset<LiveStreamRemoveEndpoints> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamRemoveEndpoints>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamRemoveEndpoints> CreateLiveStreamRemoveEndpoints(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> endpoint_ids = 0) {
  LiveStreamRemoveEndpointsBuilder builder_(_fbb);
  builder_.add_endpoint_ids(endpoint_ids);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LiveStreamRemoveEndpoints> CreateLiveStreamRemoveEndpointsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *endpoint_ids = nullptr) {
  return webstreamer::CreateLiveStreamRemoveEndpoints(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      endpoint_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*endpoint_ids) : 0);
}

struct LiveStreamError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_REASON = 6
  };
  int16_t code() const {
    return GetField<int16_t>(VT_CODE, 0);
  }
  const flatbuffers::String *reason() const {
    return GetPointer<const flatbuffers::String *>(VT_REASON);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_REASON) &&
           verifier.Verify(reason()) &&
           verifier.EndTable();
  }
};

struct LiveStreamErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int16_t code) {
    fbb_.AddElement<int16_t>(LiveStreamError::VT_CODE, code, 0);
  }
  void add_reason(flatbuffers::Offset<flatbuffers::String> reason) {
    fbb_.AddOffset(LiveStreamError::VT_REASON, reason);
  }
  explicit LiveStreamErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamErrorBuilder &operator=(const LiveStreamErrorBuilder &);
  flatbuffers::Offset<LiveStreamError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamError>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamError> CreateLiveStreamError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t code = 0,
    flatbuffers::Offset<flatbuffers::String> reason = 0) {
  LiveStreamErrorBuilder builder_(_fbb);
  builder_.add_reason(reason);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<LiveStreamError> CreateLiveStreamErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t code = 0,
    const char *reason = nullptr) {
  return webstreamer::CreateLiveStreamError(
      _fbb,
      code,
      reason ? _fbb.CreateString(reason) : 0);
}

struct LiveStreamAny FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ANY_TYPE = 4,
    VT_ANY = 6
  };
  Any any_type() const {
    return static_cast<Any>(GetField<uint8_t>(VT_ANY_TYPE, 0));
  }
  const void *any() const {
    return GetPointer<const void *>(VT_ANY);
  }
  template<typename T> const T *any_as() const;
  const LiveStreamCreate *any_as_LiveStreamCreate() const {
    return any_type() == Any_LiveStreamCreate ? static_cast<const LiveStreamCreate *>(any()) : nullptr;
  }
  const LiveStreamDestroy *any_as_LiveStreamDestroy() const {
    return any_type() == Any_LiveStreamDestroy ? static_cast<const LiveStreamDestroy *>(any()) : nullptr;
  }
  const LiveStreamAddEndpoint *any_as_LiveStreamAddEndpoint() const {
    return any_type() == Any_LiveStreamAddEndpoint ? static_cast<const LiveStreamAddEndpoint *>(any()) : nullptr;
  }
  const LiveStreamRemoveEndpoint *any_as_LiveStreamRemoveEndpoint() const {
    return any_type() == Any_LiveStreamRemoveEndpoint ? static_cast<const LiveStreamRemoveEndpoint *>(any()) : nullptr;
  }
  const LiveStreamAddEndpoints *any_as_LiveStreamAddEndpoints() const {
    return any_type() == Any_LiveStreamAddEndpoints ? static_cast<const LiveStreamAddEndpoints *>(any()) : nullptr;
  }
  const LiveStreamRemoveEndpoints *any_as_LiveStreamRemoveEndpoints() const {
    return any_type() == Any_LiveStreamRemoveEndpoints ? static_cast<const LiveStreamRemoveEndpoints *>(any()) : nullptr;
  }
  const LiveStreamError *any_as_LiveStreamError() const {
    return any_type() == Any_LiveStreamError ? static_cast<const LiveStreamError *>(any()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ANY_TYPE) &&
           VerifyOffset(verifier, VT_ANY) &&
           VerifyAny(verifier, any(), any_type()) &&
           verifier.EndTable();
  }
};

template<> inline const LiveStreamCreate *LiveStreamAny::any_as<LiveStreamCreate>() const {
  return any_as_LiveStreamCreate();
}

template<> inline const LiveStreamDestroy *LiveStreamAny::any_as<LiveStreamDestroy>() const {
  return any_as_LiveStreamDestroy();
}

template<> inline const LiveStreamAddEndpoint *LiveStreamAny::any_as<LiveStreamAddEndpoint>() const {
  return any_as_LiveStreamAddEndpoint();
}

template<> inline const LiveStreamRemoveEndpoint *LiveStreamAny::any_as<LiveStreamRemoveEndpoint>() const {
  return any_as_LiveStreamRemoveEndpoint();
}

template<> inline const LiveStreamAddEndpoints *LiveStreamAny::any_as<LiveStreamAddEndpoints>() const {
  return any_as_LiveStreamAddEndpoints();
}

template<> inline const LiveStreamRemoveEndpoints *LiveStreamAny::any_as<LiveStreamRemoveEndpoints>() const {
  return any_as_LiveStreamRemoveEndpoints();
}

template<> inline const LiveStreamError *LiveStreamAny::any_as<LiveStreamError>() const {
  return any_as_LiveStreamError();
}

struct LiveStreamAnyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any_type(Any any_type) {
    fbb_.AddElement<uint8_t>(LiveStreamAny::VT_ANY_TYPE, static_cast<uint8_t>(any_type), 0);
  }
  void add_any(flatbuffers::Offset<void> any) {
    fbb_.AddOffset(LiveStreamAny::VT_ANY, any);
  }
  explicit LiveStreamAnyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LiveStreamAnyBuilder &operator=(const LiveStreamAnyBuilder &);
  flatbuffers::Offset<LiveStreamAny> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LiveStreamAny>(end);
    return o;
  }
};

inline flatbuffers::Offset<LiveStreamAny> CreateLiveStreamAny(
    flatbuffers::FlatBufferBuilder &_fbb,
    Any any_type = Any_NONE,
    flatbuffers::Offset<void> any = 0) {
  LiveStreamAnyBuilder builder_(_fbb);
  builder_.add_any(any);
  builder_.add_any_type(any_type);
  return builder_.Finish();
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_LiveStreamCreate: {
      auto ptr = reinterpret_cast<const LiveStreamCreate *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LiveStreamDestroy: {
      auto ptr = reinterpret_cast<const LiveStreamDestroy *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LiveStreamAddEndpoint: {
      auto ptr = reinterpret_cast<const LiveStreamAddEndpoint *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LiveStreamRemoveEndpoint: {
      auto ptr = reinterpret_cast<const LiveStreamRemoveEndpoint *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LiveStreamAddEndpoints: {
      auto ptr = reinterpret_cast<const LiveStreamAddEndpoints *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LiveStreamRemoveEndpoints: {
      auto ptr = reinterpret_cast<const LiveStreamRemoveEndpoints *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LiveStreamError: {
      auto ptr = reinterpret_cast<const LiveStreamError *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const webstreamer::LiveStreamAny *GetLiveStreamAny(const void *buf) {
  return flatbuffers::GetRoot<webstreamer::LiveStreamAny>(buf);
}

inline bool VerifyLiveStreamAnyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<webstreamer::LiveStreamAny>(nullptr);
}

inline void FinishLiveStreamAnyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<webstreamer::LiveStreamAny> root) {
  fbb.Finish(root);
}

}  // namespace webstreamer

#endif  // FLATBUFFERS_GENERATED_WEBSTREAMER_WEBSTREAMER_H_
